setopt ALL_EXPORT

if [[ $ZSH_VERSION == 4.3.<6-> ]]; then
    VCS_INFO_SUPPORT=1
else
    VCS_INFO_SUPPORT=0
fi

# ls commands
alias ll='ls -l'
function lsd(){ll -d $* | grep '^d'}

#perl commands
alias ped="perl -ni"
alias psed="perl -p"
#alias pgrep="grep -P"
alias psh="perl -d -e 1"

#text manipulate
alias sum="awk '{SUM += \$1} END {print SUM}'"

MANPAGER="less"

# history
# next lets set some enviromental/shell pref stuff up
setopt INC_APPEND_HISTORY SHARE_HISTORY
#setopt APPEND_HISTORY
setopt CORRECT                          # command CORRECTION
setopt EXTENDED_HISTORY                 # puts timestamps in the history
HISTFILE=$HOME/.zhistory
HISTSIZE=1000
SAVEHIST=1000

# Set/unset  shell options
setopt   notify globdots correct pushdtohome cdablevars autolist
setopt   correctall autocd recexact longlistjobs
setopt   autoresume histignoredups pushdsilent 
setopt   autopushd pushdminus extendedglob rcquotes mailwarning
unsetopt bgnice autoparamslash flowcontrol

# completion
autoload -U compinit
compinit
zstyle ':completion::complete:*' use-cache on
zstyle ':completion::complete:*' cache-path ~/.zsh/cache/$HOST
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-prompt '%SAt %p: Hit TAB for more, or the character to insert%s'
zstyle ':completion:*' menu select=1 _complete _ignored _approximate
zstyle ':completion:*' select-prompt '%SScrolling active: current selection at %p%s'

# Completion Styles

# list of completers to use
zstyle ':completion:*::::' completer _expand _complete _ignored _approximate

# allow one error for every three characters typed in approximate completer
# zstyle ':completion:*:approximate:*' max-errors 2 numeric
    
# insert all expansions for expand completer
zstyle ':completion:*:expand:*' tag-order all-expansions

# formatting and messages
zstyle ':completion:*' verbose yes
zstyle ':completion:*:descriptions' format '%B%d%b'
zstyle ':completion:*:messages' format '%d'
zstyle ':completion:*:warnings' format 'No matches for: %d'
zstyle ':completion:*:corrections' format '%B%d (errors: %e)%b'
zstyle ':completion:*' group-name ''

# match uppercase from lowercase
# zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# offer indexes before parameters in subscripts
zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters

# Filename suffixes to ignore during completion (except after rm command)
zstyle ':completion:*:*:(^rm):*:*files' ignored-patterns '*?.o' '*?.c~' \
    '*?.old' '*?.pro'

# ignore completion functions (until the _ignored completer)
zstyle ':completion:*:functions' ignored-patterns '_*'

# vcs info
autoload -Uz vcs_info
zstyle ':vcs_info:git:*' formats '[%b]' 
zstyle ':vcs_info:git:*' actionformats '[%b|%a]' 

#prompt
function preprompt() {
    ###
    # Need this so the prompt will work.
    setopt prompt_subst
    ###
    # See if we can use colors.
    autoload colors zsh/terminfo
    if [[ "$terminfo[colors]" -ge 8 ]]; then
	colors
    fi
    for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; do
	eval PR_$color='%{$terminfo[bold]$fg[${(L)color}]%}'
	eval PR_LIGHT_$color='%{$fg[${(L)color}]%}'
	(( count = $count + 1 ))
    done
    PR_NO_COLOUR="%{$terminfo[sgr0]%}"

    ###
    # See if we can use extended characters to look nicer.
    typeset -A altchar
    set -A altchar ${(s..)terminfo[acsc]}
    PR_SET_CHARSET="%{$terminfo[enacs]%}"
    PR_SHIFT_IN="%{$terminfo[smacs]%}"
    PR_SHIFT_OUT="%{$terminfo[rmacs]%}"
    PR_HBAR=${altchar[q]:--}
    PR_ULCORNER=${altchar[l]:--}
    PR_LLCORNER=${altchar[m]:--}
    PR_LRCORNER=${altchar[j]:--}
    PR_URCORNER=${altchar[k]:--}

    PR_TITLEBAR=$'%{\e]0;%(!.-=*[ROOT]*=- | .)%m:%c1\a%}'
}

function precmd { 
    local TERMWIDTH
    (( TERMWIDTH = ${COLUMNS} - 1 ))
    ###
    # Truncate the path if it's too long.
    
    PR_FILLBAR=""
    PR_PWDLEN=""
    
    local promptsize=${#${(%):---(%n:%m@)---(INSERT)--}}
    local pwdsize=${#${(%):-%~}}
    if [[ $VCS_INFO_SUPPORT == 1 ]]; then
        vcs_info
    fi
    local gitsize=${#${(%):-${vcs_info_msg_0_}}}
    
    if [[ "$promptsize + $pwdsize + $gitsize" -gt $TERMWIDTH ]]; then
	    ((PR_PWDLEN=$TERMWIDTH - $promptsize - $gitsize))
    else
	PR_FILLBAR="\${(l.(($TERMWIDTH - ($promptsize + $pwdsize + $gitsize)))..${PR_HBAR}.)}"
    fi
    # Finally, the prompt.
    promptstr INSERT
}

function promptstr() {
    local prefixstr='$PR_SET_CHARSET$PR_STITLE${(e)PR_TITLEBAR}\
$PR_BLUE$PR_SHIFT_IN$PR_ULCORNER$PR_HBAR$PR_SHIFT_OUT(\
$PR_RED%n@%m:\
$PR_GREEN%$PR_PWDLEN<...<%~%<<$PR_CYAN${vcs_info_msg_0_}$PR_BLUE)$PR_SHIFT_IN$PR_HBAR$PR_HBAR${(e)PR_FILLBAR}$PR_BLUE$PR_HBAR$PR_SHIFT_OUT('
    local mode="$1"
    local postfixstr='$PR_BLUE)$PR_SHIFT_IN$PR_HBAR$PR_HBAR
$PR_BLUE$PR_SHIFT_IN$PR_LLCORNER$PR_HBAR$PR_SHIFT_OUT\
>\
$PR_NO_COLOUR'
    PROMPT="$prefixstr$mode$postfixstr"
}

preprompt

#bind key
WORDCHARS=
bindkey -v
zle-keymap-select() {
  if [[ $KEYMAP == vicmd ]]; then
    promptstr NORMAL
    zle reset-prompt
  else
    promptstr INSERT
    zle reset-prompt
  fi
}
zle -N zle-keymap-select
bindkey ' ' magic-space
bindkey -M viins '^B' vi-backward-word
bindkey -M viins '^F' vi-forward-word
bindkey -M viins '^H' backward-char
bindkey -M viins '^L' forward-char
bindkey -M viins '^J' history-beginning-search-forward
bindkey -M viins '^K' history-beginning-search-backward
bindkey -M viins '^D' delete-char-or-list
bindkey -M viins '^S' delete-word
bindkey -M viins '^W' backward-delete-word
bindkey -M viins '^?' backward-delete-char
bindkey -M viins '^A' beginning-of-line
bindkey -M viins '^E' end-of-line
bindkey -M viins '^U' kill-whole-line
bindkey -M vicmd 'j' history-beginning-search-forward
bindkey -M vicmd 'k' history-beginning-search-backward

# GIT Settings
function git_track_branch() {
	git branch --track $1 origin/$1
}

function get_git_branch(){
  git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'
}

alias gc="git checkout"
alias gd="git diff"
alias gs="git status"
alias gp='git pull'
alias gps='git push origin `get_git_branch`'
alias gt='git_track_branch'
# Disable git completion
compdef "" git
